# -*- coding: utf-8 -*-
"""Fedral_Government_Allocation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tEugldFNo3rjzVC6vgigfGVDRmDjEK3g
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly
import plotly.express as px
import plotly.graph_objects as g

# @title
df = pd.read_excel('FAAC DATA - Data Community.xlsx', sheet_name='State')
df.head()

# @title
df = df.iloc[:, :-7]

# @title
df.shape

# @title
summary_statistics = df.describe()
summary_statistics

numeric_columns = df.select_dtypes(include='number')
total_allocations_by_state = numeric_columns.set_index(df['State']).sum(axis=1).sort_values(ascending=False)

# Set the style
sns.set_style("whitegrid")

# Create a color palette
palette = sns.color_palette("viridis", len(total_allocations_by_state))

# Plotting the total allocations by state
plt.figure(figsize=(20, 8))
sns.barplot(
    x=total_allocations_by_state.index,
    y=total_allocations_by_state.values,
    palette=palette
)

# Customize the plot
plt.title('Total Allocations by State (2007-2024)', fontsize=18, fontweight='bold')
plt.xlabel('State', fontsize=14, fontweight='bold')
plt.ylabel('Total Allocation', fontsize=14, fontweight='bold')
plt.xticks(rotation=90, fontsize=12)
plt.yticks(fontsize=12)

# Remove top and right spines
sns.despine()

# Show plot
plt.show()

# @title
# Convert all date columns to numeric, setting errors='coerce' to handle non-numeric values
for col in df.columns[1:]:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Check for any remaining non-numeric values
df.info()

# @title

# Ensure all allocation columns are numeric
for col in df.columns[1:]:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Calculate the mean allocations by state
mean_allocations_by_state = df.set_index('State').mean(axis=1).sort_values(ascending=False)

mean_allocations_by_state.head()

# @title
regions = {
    'North Central': ['Benue', 'Kogi', 'Kwara', 'Nasarawa', 'Niger', 'Plateau', 'Federal Capital Territory'],
    'North East': ['Adamawa', 'Bauchi', 'Borno', 'Gombe', 'Taraba', 'Yobe'],
    'North West': ['Jigawa', 'Kaduna', 'Kano', 'Katsina', 'Kebbi', 'Sokoto', 'Zamfara'],
    'South East': ['Abia', 'Anambra', 'Ebonyi', 'Enugu', 'Imo'],
    'South South': ['Akwa Ibom', 'Bayelsa', 'Cross River', 'Delta', 'Edo', 'Rivers'],
    'South West': ['Ekiti', 'Lagos', 'Ogun', 'Ondo', 'Osun', 'Oyo']
}

# Reverse mapping for convenience
state_to_region = {state: region for region, states in regions.items() for state in states}

# Add a 'Region' column to the DataFrame
df['Region'] = df['State'].map(state_to_region)
df.head()

# @title
# Melt the dataframe to long format for easier manipulation
df_melted = df.melt(id_vars=['State', 'Region'], var_name='Date', value_name='Allocation')

# Convert Date column to datetime format
df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# Create a pivot table to calculate average allocations by region for each month
pivot_table_avg = pd.pivot_table(
    df_melted,
    values='Allocation',
    index=df_melted['Date'].dt.strftime('%b-%Y'),
    columns='Region',
    aggfunc='mean'
)

pivot_table_avg.head()

# Select a few states for trend visualization
selected_states = ['Bayelsa', 'Lagos', 'Akwa Ibom', 'Kano', 'Rivers', 'Delta', 'Ondo']

# Plotting the monthly allocations trend for selected states
plt.figure(figsize=(22, 8))
for state in selected_states:
    # Extract the dates (column names excluding 'State' and 'Region') and corresponding allocations for the current state
    dates = df.columns[2:-1]  # Start from index 2 to exclude 'State' and 'Region'
    dates = pd.to_datetime(dates, format='%b-%Y') # Convert dates to datetime objects
    allocations = df.set_index('State').loc[state, dates] # Select allocations corresponding to the datetime objects
    plt.plot(dates, allocations, label=state)  # Plot dates on x-axis and allocations on y-axis

plt.title('Monthly Allocations Trend (2007-2024) For States with The Most Share of Allocation')
plt.xlabel('Date')
plt.ylabel('Monthly Allocation')
plt.legend()
plt.xticks(rotation=90)
plt.show()

# @title
# # Calculate the total allocations by state, excluding the 'Region' column
# total_allocations_by_state = df.set_index('State').drop('Region', axis=1).mean(axis=1).sort_values(ascending=False)

# # Plotting the total allocations by state
# import matplotlib.pyplot as plt

# plt.figure(figsize=(22, 8))
# total_allocations_by_state.plot(kind='bar')
# plt.title('Total Average Allocations by State')
# plt.xlabel('State')
# plt.ylabel('Total Average Allocation')
# plt.show()

# @title
# Pivot table to sum allocations by region for each month
pivot_table_sum = pd.pivot_table(
    df_melted,  # Use the melted dataframe where dates are in a single column
    values='Allocation',
    index='Region',
    columns=df_melted['Date'].dt.strftime('%b-%Y'),  # Use formatted dates as columns
    aggfunc='sum'
)
pivot_table_sum.head()

# @title
# Pivot table to calculate average allocations by region for each month
pivot_table_avg = pd.pivot_table(
    df_melted,  # Use the melted dataframe
    values='Allocation',
    index='Region',
    columns=df_melted['Date'].dt.strftime('%b-%Y'),  # Use formatted dates as columns
    aggfunc='mean'
)
pivot_table_avg.head(10)

monthly_avg_pivot = pd.pivot_table(
    df_melted,
    values='Allocation',
    index=df_melted['Date'].dt.strftime('%b'),
    columns='Region',
    aggfunc='mean'
)

# Define the correct order for months
month_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

# Convert index to categorical with specified order
monthly_avg_pivot.index = pd.Categorical(monthly_avg_pivot.index, categories=month_order, ordered=True)
monthly_avg_pivot = monthly_avg_pivot.sort_index()

# Plot monthly average allocations by region
plt.figure(figsize=(22, 8))
for region in monthly_avg_pivot.columns:
    plt.plot(monthly_avg_pivot.index, monthly_avg_pivot[region], marker='o', label=region)
plt.title('Monthly Average Allocations by Region')
plt.xlabel('Month')
plt.ylabel('Average Allocation')
plt.legend()
plt.grid(True)
plt.show()

# @title
# # Select a few states for trend visualization
# selected_states = ['Delta', 'Lagos', 'Kano', 'Rivers', 'Ondo', 'Akwa Ibom', 'Bayelsa']

# # Plotting the monthly allocations trend for selected states
# plt.figure(figsize=(22, 8))
# for state in selected_states: # Iterate through the list of selected states
#     # Extract the allocation values for the current state, excluding the 'Region' column
#     state_allocations = df.set_index('State').loc[state].drop('Region', errors='ignore')
#     plt.plot(state_allocations.index, state_allocations.values, label=state) # Plot each state's allocation trend

# plt.title('Allocations Trend (2007-2024)')
# plt.xlabel('Date')
# plt.ylabel('Allocation')
# plt.legend()
# plt.xticks(rotation=90)
# plt.show()

# @title
regions = {
    'North Central': ['Benue', 'Kogi', 'Kwara', 'Nasarawa', 'Niger', 'Plateau', 'Federal Capital Territory'],
    'North East': ['Adamawa', 'Bauchi', 'Borno', 'Gombe', 'Taraba', 'Yobe'],
    'North West': ['Jigawa', 'Kaduna', 'Kano', 'Katsina', 'Kebbi', 'Sokoto', 'Zamfara'],
    'South East': ['Abia', 'Anambra', 'Ebonyi', 'Enugu', 'Imo'],
    'South South': ['Akwa Ibom', 'Bayelsa', 'Cross River', 'Delta', 'Edo', 'Rivers'],
    'South West': ['Ekiti', 'Lagos', 'Ogun', 'Ondo', 'Osun', 'Oyo']
}

# Reverse mapping for convenience
state_to_region = {state: region for region, states in regions.items() for state in states}

# Add a 'Region' column to the DataFrame
df['Region'] = df['State'].map(state_to_region)
df.head()

# @title
# Group by 'Region' and sum the allocations (excluding datetime columns)
region_df = df.groupby('Region').sum().reset_index()

# Transpose the DataFrame for easier plotting
region_df_transposed = region_df.set_index('Region').transpose()

region_df_transposed

# @title
# Pivot table to sum allocations by region for each month
pivot_table_sum = pd.pivot_table(
    df,
    values=df.columns[1:-1],  # All date columns
    index='Region',
    aggfunc='sum'
)
pivot_table_sum.head()

# @title
# Pivot table to calculate average allocations by region for each month
pivot_table_avg = pd.pivot_table(
    df,
    values=df.columns[1:-1],  # All date columns
    index='Region',
    aggfunc='mean'
)
pivot_table_avg.head()

# @title
# Transpose the pivot tables
pivot_table_sum_transposed = pivot_table_sum.transpose()
pivot_table_avg_transposed = pivot_table_avg.transpose()

# Set index to datetime for plotting
pivot_table_sum_transposed.index = pd.to_datetime(pivot_table_sum_transposed.index, format='%b-%Y')
pivot_table_avg_transposed.index = pd.to_datetime(pivot_table_avg_transposed.index, format='%b-%Y')

import matplotlib.pyplot as plt

# Plotting sum allocations time series for each region
plt.figure(figsize=(22, 8))
for region in pivot_table_sum_transposed.columns:
    plt.plot(pivot_table_sum_transposed[region], label=region)
plt.title('Sum Allocations Time Series by Region')
plt.xlabel('Date')
plt.ylabel('Sum Allocation')
plt.legend()
plt.grid(True)
plt.show()

# Plotting average allocations time series for each region
plt.figure(figsize=(22, 8))
for region in pivot_table_avg_transposed.columns:
    plt.plot(pivot_table_avg_transposed[region], label=region)
plt.title('Average Allocations Time Series by Region')
plt.xlabel('Date')
plt.ylabel('Average Allocation')
plt.legend()
plt.grid(True)
plt.show()

# Group by region and sum allocations
region_totals = melted_df.groupby('Region')['Allocation'].sum().reset_index()

fig = px.pie(region_totals, values='Allocation', names='Region',
             title='Total Allocations Share by Region')

# Display the chart
fig.show()

# @title
# Melt the dataframe to long format for easier manipulation
df_melted = df.melt(id_vars=['State', 'Region'], var_name='Date', value_name='Allocation')

# Convert Date column to datetime format
df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# Extract the year and month from the Date column
df_melted['Year'] = df_melted['Date'].dt.year
df_melted['Month'] = df_melted['Date'].dt.month

df_melted.head()

# @title
# Melt the dataframe to long format for easier manipulation
df_melted = df.melt(id_vars=['State', 'Region'], var_name='Date', value_name='Allocation')

# Convert Date column to datetime format
df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# Extract the year from the Date column
df_melted['Year'] = df_melted['Date'].dt.year

display(df_melted.head())

# @title
# Group by state and year, and sum the allocations
allocations_by_year = df_melted.groupby(['State', 'Year'])['Allocation'].sum().reset_index()

allocations_by_year.head()

# @title
# # Plot the trend for each state
# plt.figure(figsize=(22, 8))
# for state in allocations_by_year['State'].unique():
#     state_data = allocations_by_year[allocations_by_year['State'] == state]
#     plt.plot(state_data['Year'], state_data['Allocation'], marker='o', label=state)

# plt.title('Total Allocations by State Over the Years')
# plt.xlabel('Year')
# plt.ylabel('Total Allocation')
# plt.legend()
# plt.xticks(rotation=45)
# plt.grid(True)
# plt.show()

# @title
# # Define the order of months for proper plotting
# month_order = ['2023-01', '2023-02', '2023-03', '2023-04', '2023-05', '2023-06',
#                '2023-07', '2023-08', '2023-09', '2023-10', '2023-11', '2023-12']

# # Melt the DataFrame to long format for easier manipulation
# df_melted = df.melt(id_vars=['State', 'Region'], var_name='Date', value_name='Allocation')

# # Convert Date column to datetime format
# df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# # Extract the year and month from the Date column
# df_melted['Year'] = df_melted['Date'].dt.year
# df_melted['Month'] = df_melted['Date'].dt.to_period('M').astype(str)

# # Now `df_melted` is the DataFrame we'll use
# allocations_by_year = df_melted

# # Get unique states and years from the DataFrame
# unique_states = allocations_by_year['State'].unique()
# unique_years = allocations_by_year['Year'].unique()

# # Function to select a state with input validation
# def select_state(prompt):
#     while True:
#         print(prompt)
#         for i, state in enumerate(unique_states, 1):
#             print(f"{i}. {state}")
#         try:
#             state_index = int(input("Enter the number corresponding to the state: ")) - 1
#             if 0 <= state_index < len(unique_states):
#                 return unique_states[state_index]
#             else:
#                 print("Invalid selection. Please select a valid number.")
#         except ValueError:
#             print("Invalid input. Please enter a number.")

# # Prompt user to select the first state
# state_selected_a = select_state("Select the first state from the following options:")

# # Prompt user to select the second state
# state_selected_b = select_state("Select the second state from the following options:")

# # Prompt user to select the year range
# while True:
#     try:
#         print(f"Select a year range between {min(unique_years)} and {max(unique_years)}")
#         start_year = int(input("Enter the start year: "))
#         end_year = int(input("Enter the end year: "))
#         if start_year in unique_years and end_year in unique_years and start_year <= end_year:
#             break
#         else:
#             print("Invalid year range. Please enter a valid range.")
#     except ValueError:
#         print("Invalid input. Please enter a number.")

# # Check if start year and end year are the same
# if start_year == end_year:
#     # Filter data by month within the selected year for both states
#     filtered_data_a = allocations_by_year[
#         (allocations_by_year['State'] == state_selected_a) &
#         (allocations_by_year['Year'] == start_year)
#     ].groupby('Month')['Allocation'].sum().reindex(month_order)

#     filtered_data_b = allocations_by_year[
#         (allocations_by_year['State'] == state_selected_b) &
#         (allocations_by_year['Year'] == start_year)
#     ].groupby('Month')['Allocation'].sum().reindex(month_order)

#     # Debugging info: Check if filtered_data_a and filtered_data_b have data
#     print(filtered_data_a)
#     print(filtered_data_b)

#     # Create monthly line plot
#     fig, ax = plt.subplots(figsize=(20, 8))
#     ax.plot(filtered_data_a.index, filtered_data_a.values, marker='o', label=f"{state_selected_a} - {start_year}")
#     ax.plot(filtered_data_b.index, filtered_data_b.values, marker='o', label=f"{state_selected_b} - {start_year}")
#     ax.set_title(f'Total Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
#     ax.set_xlabel('Month')
#     ax.set_ylabel('Total Allocation')
#     ax.legend()
#     ax.grid(True)
#     plt.xticks(rotation=45)

# else:
#     # Filter data based on user selection for yearly plot
#     filtered_data_a = allocations_by_year[
#         (allocations_by_year['State'] == state_selected_a) &
#         (allocations_by_year['Year'] >= start_year) &
#         (allocations_by_year['Year'] <= end_year)
#     ].groupby('Year')['Allocation'].sum()

#     filtered_data_b = allocations_by_year[
#         (allocations_by_year['State'] == state_selected_b) &
#         (allocations_by_year['Year'] >= start_year) &
#         (allocations_by_year['Year'] <= end_year)
#     ].groupby('Year')['Allocation'].sum()

#     # Create yearly line plot
#     fig, ax = plt.subplots(figsize=(20, 8))
#     ax.plot(filtered_data_a.index, filtered_data_a.values, marker='o', label=state_selected_a)
#     ax.plot(filtered_data_b.index, filtered_data_b.values, marker='o', label=state_selected_b)
#     ax.set_title('Total Allocations by State Over the Years')
#     ax.set_xlabel('Year')
#     ax.set_ylabel('Total Allocation')
#     ax.legend()
#     ax.grid(True)
#     plt.xticks(rotation=45)

# # Display the plot
# plt.show()

# @title
# # Melt the DataFrame to long format for easier manipulation
# df_melted = df.melt(id_vars=['State', 'Region'], var_name='Date', value_name='Allocation')

# # Convert Date column to datetime format
# df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# # Extract the year and month from the Date column
# df_melted['Year'] = df_melted['Date'].dt.year
# df_melted['Month'] = df_melted['Date'].dt.to_period('M').astype(str)

# # Now `df_melted` is the DataFrame we'll use
# allocations_by_year = df_melted

# # Get unique states and years from the DataFrame
# unique_states = allocations_by_year['State'].unique()
# unique_years = allocations_by_year['Year'].unique()

# # Function to select a state with input validation
# def select_state(prompt):
#     while True:
#         print(prompt)
#         for i, state in enumerate(unique_states, 1):
#             print(f"{i}. {state}")
#         try:
#             state_index = int(input("Enter the number corresponding to the state: ")) - 1
#             if 0 <= state_index < len(unique_states):
#                 return unique_states[state_index]
#             else:
#                 print("Invalid selection. Please select a valid number.")
#         except ValueError:
#             print("Invalid input. Please enter a number.")

# # Prompt user to select the first state
# state_selected_a = select_state("Select the first state from the following options:")

# # Prompt user to select the second state
# state_selected_b = select_state("Select the second state from the following options:")

# # Prompt user to select the year range
# while True:
#     try:
#         print(f"Select a year range between {min(unique_years)} and {max(unique_years)}")
#         start_year = int(input("Enter the start year: "))
#         end_year = int(input("Enter the end year: "))
#         if start_year in unique_years and end_year in unique_years and start_year <= end_year:
#             break
#         else:
#             print("Invalid year range. Please enter a valid range.")
#     except ValueError:
#         print("Invalid input. Please enter a number.")

# # Check if start year and end year are the same
# if start_year == end_year:
#     # Filter data by month within the selected year for both states
#     filtered_data_a = allocations_by_year[
#         (allocations_by_year['State'] == state_selected_a) &
#         (allocations_by_year['Year'] == start_year)
#     ].groupby('Month')['Allocation'].sum().reindex(month_order)

#     filtered_data_b = allocations_by_year[
#         (allocations_by_year['State'] == state_selected_b) &
#         (allocations_by_year['Year'] == start_year)
#     ].groupby('Month')['Allocation'].sum().reindex(month_order)

#     # Create monthly line plot
#     fig, ax = plt.subplots(figsize=(22, 8))
#     ax.plot(filtered_data_a.index, filtered_data_a.values, marker='o', label=f"{state_selected_a} - {start_year}")
#     ax.plot(filtered_data_b.index, filtered_data_b.values, marker='o', label=f"{state_selected_b} - {start_year}")
#     ax.set_title(f'Total Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
#     ax.set_xlabel('Month')
#     ax.set_ylabel('Total Allocation')
#     ax.legend()
#     ax.grid(True)
#     plt.xticks(rotation=45)

# else:
#     # Filter data based on user selection for yearly plot
#     filtered_data_a = allocations_by_year[
#         (allocations_by_year['State'] == state_selected_a) &
#         (allocations_by_year['Year'] >= start_year) &
#         (allocations_by_year['Year'] <= end_year)
#     ].groupby('Year')['Allocation'].sum()

#     filtered_data_b = allocations_by_year[
#         (allocations_by_year['State'] == state_selected_b) &
#         (allocations_by_year['Year'] >= start_year) &
#         (allocations_by_year['Year'] <= end_year)
#     ].groupby('Year')['Allocation'].sum()

#     # Create yearly line plot
#     fig, ax = plt.subplots(figsize=(22, 8))
#     ax.plot(filtered_data_a.index, filtered_data_a.values, marker='o', label=state_selected_a)
#     ax.plot(filtered_data_b.index, filtered_data_b.values, marker='o', label=state_selected_b)
#     ax.set_title('Total Allocations by State Over the Years')
#     ax.set_xlabel('Year')
#     ax.set_ylabel('Total Allocation')
#     ax.legend()
#     ax.grid(True)
#     plt.xticks(rotation=45)

# # Display the plot
# plt.show()

# Define the order of months for proper plotting
month_order = ['2023-01', '2023-02', '2023-03', '2023-04', '2023-05', '2023-06',
               '2023-07', '2023-08', '2023-09', '2023-10', '2023-11', '2023-12']

# Melt the DataFrame to long format for easier manipulation
df_melted = df.melt(id_vars=['State', 'Region'], var_name='Date', value_name='Allocation')

# Convert Date column to datetime format
df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# Extract the year and month from the Date column
df_melted['Year'] = df_melted['Date'].dt.year
df_melted['Month'] = df_melted['Date'].dt.strftime('%Y-%m')

# Now `df_melted` is the DataFrame we'll use
allocations_by_year = df_melted

# Get unique states and years from the DataFrame
unique_states = allocations_by_year['State'].unique()
unique_years = allocations_by_year['Year'].unique()

# Function to select a state with input validation
def select_state(prompt):
    while True:
        print(prompt)
        for i, state in enumerate(unique_states, 1):
            print(f"{i}. {state}")
        try:
            state_index = int(input("Enter the number corresponding to the state: ")) - 1
            if 0 <= state_index < len(unique_states):
                return unique_states[state_index]
            else:
                print("Invalid selection. Please select a valid number.")
        except ValueError:
            print("Invalid input. Please enter a number.")

# Prompt user to select the first state
state_selected_a = select_state("Select the first state from the following options:")

# Prompt user to select the second state
state_selected_b = select_state("Select the second state from the following options:")

# Prompt user to select the year range
while True:
    try:
        print(f"Select a year range between {min(unique_years)} and {max(unique_years)}")
        start_year = int(input("Enter the start year: "))
        end_year = int(input("Enter the end year: "))
        if start_year in unique_years and end_year in unique_years and start_year <= end_year:
            break
        else:
            print("Invalid year range. Please enter a valid range.")
    except ValueError:
        print("Invalid input. Please enter a number.")

# Check if start year and end year are the same
if start_year == end_year:
    # Filter data by month within the selected year for both states
    filtered_data_a = allocations_by_year[
        (allocations_by_year['State'] == state_selected_a) &
        (allocations_by_year['Year'] == start_year)
    ].groupby('Month')['Allocation'].sum().reindex(month_order).fillna(0)

    filtered_data_b = allocations_by_year[
        (allocations_by_year['State'] == state_selected_b) &
        (allocations_by_year['Year'] == start_year)
    ].groupby('Month')['Allocation'].sum().reindex(month_order).fillna(0)

    # Create monthly line plot
    fig, ax = plt.subplots(figsize=(22, 8))
    ax.plot(filtered_data_a.index, filtered_data_a.values, marker='o', label=f"{state_selected_a} - {start_year}")
    ax.plot(filtered_data_b.index, filtered_data_b.values, marker='o', label=f"{state_selected_b} - {start_year}")
    ax.set_title(f'Total Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
    ax.set_xlabel('Month')
    ax.set_ylabel('Total Allocation')
    ax.legend()
    ax.grid(True)
    plt.xticks(rotation=45)

else:
    # Filter data based on user selection for yearly plot
    filtered_data_a = allocations_by_year[
        (allocations_by_year['State'] == state_selected_a) &
        (allocations_by_year['Year'] >= start_year) &
        (allocations_by_year['Year'] <= end_year)
    ].groupby('Year')['Allocation'].sum()

    filtered_data_b = allocations_by_year[
        (allocations_by_year['State'] == state_selected_b) &
        (allocations_by_year['Year'] >= start_year) &
        (allocations_by_year['Year'] <= end_year)
    ].groupby('Year')['Allocation'].sum()

    # Create yearly line plot
    fig, ax = plt.subplots(figsize=(22, 8))
    ax.plot(filtered_data_a.index, filtered_data_a.values, marker='o', label=state_selected_a)
    ax.plot(filtered_data_b.index, filtered_data_b.values, marker='o', label=state_selected_b)
    ax.set_title('Total Allocations by State Over the Years')
    ax.set_xlabel('Year')
    ax.set_ylabel('Total Allocation')
    ax.legend()
    ax.grid(True)
    plt.xticks(rotation=45)

# Display the plot
plt.show()

# Melt the DataFrame to long format for easier manipulation
df_melted = df.melt(id_vars=['State', 'Region'], var_name='Date', value_name='Allocation')

# Convert Date column to datetime format
df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# Extract the year and month from the Date column
df_melted['Year'] = df_melted['Date'].dt.year
df_melted['Month'] = df_melted['Date'].dt.strftime('%Y-%m')

# Now `df_melted` is the DataFrame we'll use
allocations_by_year = df_melted

# Get unique states and years from the DataFrame
unique_states = allocations_by_year['State'].unique()
unique_years = allocations_by_year['Year'].unique()

# Function to select a state with input validation
def select_state(prompt):
    while True:
        print(prompt)
        for i, state in enumerate(unique_states, 1):
            print(f"{i}. {state}")
        try:
            state_index = int(input("Enter the number corresponding to the state: ")) - 1
            if 0 <= state_index < len(unique_states):
                return unique_states[state_index]
            else:
                print("Invalid selection. Please select a valid number.")
        except ValueError:
            print("Invalid input. Please enter a number.")

# Prompt user to select the first state
state_selected_a = select_state("Select the first state from the following options:")

# Prompt user to select the second state
state_selected_b = select_state("Select the second state from the following options:")

# Prompt user to select the year range
while True:
    try:
        print(f"Select a year range between {min(unique_years)} and {max(unique_years)}")
        start_year = int(input("Enter the start year: "))
        end_year = int(input("Enter the end year: "))
        if start_year in unique_years and end_year in unique_years and start_year <= end_year:
            break
        else:
            print("Invalid year range. Please enter a valid range.")
    except ValueError:
        print("Invalid input. Please enter a number.")

# Prompt user to select whether they want the total sum or average
while True:
    print("Select the type of plot:")
    print("1. Total Sum")
    print("2. Average")
    try:
        plot_type = int(input("Enter the number corresponding to your choice: "))
        if plot_type in [1, 2]:
            break
        else:
            print("Invalid selection. Please select a valid number.")
    except ValueError:
        print("Invalid input. Please enter a number.")

# Check if start year and end year are the same
if start_year == end_year:
    # Filter data by month within the selected year for both states
    filtered_data_a = allocations_by_year[
        (allocations_by_year['State'] == state_selected_a) &
        (allocations_by_year['Year'] == start_year)
    ]
    filtered_data_b = allocations_by_year[
        (allocations_by_year['State'] == state_selected_b) &
        (allocations_by_year['Year'] == start_year)
    ]

    if plot_type == 1:
        # Create monthly line plot for total sum
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(filtered_data_a['Month'], filtered_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Total Sum")
        ax.plot(filtered_data_b['Month'], filtered_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Total Sum")
        ax.set_title(f'Total Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
    else:
        # Create monthly line plot for average
        avg_data_a = filtered_data_a.groupby('Month')['Allocation'].mean().reset_index()
        avg_data_b = filtered_data_b.groupby('Month')['Allocation'].mean().reset_index()
        fig, ax = plt.subplots(figsize=(14, 8))
        ax.plot(avg_data_a['Month'], avg_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Average")
        ax.plot(avg_data_b['Month'], avg_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Average")
        ax.set_title(f'Average Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
else:
    # Filter data based on user selection for yearly plot
    filtered_data_a = allocations_by_year[
        (allocations_by_year['State'] == state_selected_a) &
        (allocations_by_year['Year'] >= start_year) &
        (allocations_by_year['Year'] <= end_year)
    ]
    filtered_data_b = allocations_by_year[
        (allocations_by_year['State'] == state_selected_b) &
        (allocations_by_year['Year'] >= start_year) &
        (allocations_by_year['Year'] <= end_year)
    ]

    if plot_type == 1:
        # Create yearly line plot for total sum
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(filtered_data_a['Year'], filtered_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Total Sum")
        ax.plot(filtered_data_b['Year'], filtered_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Total Sum")
        ax.set_title('Total Allocations by State Over the Years')
    else:
        # Create yearly line plot for average
        avg_data_a = filtered_data_a.groupby('Year')['Allocation'].mean().reset_index()
        avg_data_b = filtered_data_b.groupby('Year')['Allocation'].mean().reset_index()
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(avg_data_a['Year'], avg_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Average")
        ax.plot(avg_data_b['Year'], avg_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Average")
        ax.set_title('Average Allocations by State Over the Years')

ax.set_xlabel('Year' if start_year != end_year else 'Month')
ax.set_ylabel('Total Allocation')
ax.legend()
ax.grid(True)
plt.xticks(rotation=45)

# Display the plot
plt.show()

# Define the order of months for proper plotting
month_order = ['2023-01', '2023-02', '2023-03', '2023-04', '2023-05', '2023-06',
               '2023-07', '2023-08', '2023-09', '2023-10', '2023-11', '2023-12']

# Melt the DataFrame to long format for easier manipulation
df_melted = df.melt(id_vars=['State', 'Region'], var_name='Date', value_name='Allocation')

# Convert Date column to datetime format
df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# Extract the year and month from the Date column
df_melted['Year'] = df_melted['Date'].dt.year
df_melted['Month'] = df_melted['Date'].dt.strftime('%Y-%m')

# Now `df_melted` is the DataFrame we'll use
allocations_by_year = df_melted

# Get unique states and years from the DataFrame
unique_states = allocations_by_year['State'].unique()
unique_years = allocations_by_year['Year'].unique()

# Function to select a state with input validation
def select_state(prompt):
    while True:
        print(prompt)
        for i, state in enumerate(unique_states, 1):
            print(f"{i}. {state}")
        try:
            state_index = int(input("Enter the number corresponding to the state: ")) - 1
            if 0 <= state_index < len(unique_states):
                return unique_states[state_index]
            else:
                print("Invalid selection. Please select a valid number.")
        except ValueError:
            print("Invalid input. Please enter a number.")

# Prompt user to select the first state
state_selected_a = select_state("Select the first state from the following options:")

# Prompt user to select the second state
state_selected_b = select_state("Select the second state from the following options:")

# Prompt user to select the year range
while True:
    try:
        print(f"Select a year range between {min(unique_years)} and {max(unique_years)}")
        start_year = int(input("Enter the start year: "))
        end_year = int(input("Enter the end year: "))
        if start_year in unique_years and end_year in unique_years and start_year <= end_year:
            break
        else:
            print("Invalid year range. Please enter a valid range.")
    except ValueError:
        print("Invalid input. Please enter a number.")

# Prompt user to select whether they want the total sum or average
while True:
    print("Select the type of plot:")
    print("1. Total Sum")
    print("2. Average")
    try:
        plot_type = int(input("Enter the number corresponding to your choice: "))
        if plot_type in [1, 2]:
            break
        else:
            print("Invalid selection. Please select a valid number.")
    except ValueError:
        print("Invalid input. Please enter a number.")

# Check if start year and end year are the same
if start_year == end_year:
    # Filter data by month within the selected year for both states
    filtered_data_a = allocations_by_year[
        (allocations_by_year['State'] == state_selected_a) &
        (allocations_by_year['Year'] == start_year)
    ]
    filtered_data_b = allocations_by_year[
        (allocations_by_year['State'] == state_selected_b) &
        (allocations_by_year['Year'] == start_year)
    ]

    if plot_type == 1:
        # Create monthly line plot for total sum
        summed_data_a = filtered_data_a.groupby('Month')['Allocation'].sum().reindex(month_order).fillna(0)
        summed_data_b = filtered_data_b.groupby('Month')['Allocation'].sum().reindex(month_order).fillna(0)
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(summed_data_a.index, summed_data_a.values, marker='o', label=f"{state_selected_a} - Total Sum")
        ax.plot(summed_data_b.index, summed_data_b.values, marker='o', label=f"{state_selected_b} - Total Sum")
        ax.set_title(f'Total Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
    else:
        # Create monthly line plot for average
        avg_data_a = filtered_data_a.groupby('Month')['Allocation'].mean().reindex(month_order).fillna(0)
        avg_data_b = filtered_data_b.groupby('Month')['Allocation'].mean().reindex(month_order).fillna(0)
        fig, ax = plt.subplots(figsize=(14, 8))
        ax.plot(avg_data_a.index, avg_data_a.values, marker='o', label=f"{state_selected_a} - Average")
        ax.plot(avg_data_b.index, avg_data_b.values, marker='o', label=f"{state_selected_b} - Average")
        ax.set_title(f'Average Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
else:
    # Filter data based on user selection for yearly plot
    filtered_data_a = allocations_by_year[
        (allocations_by_year['State'] == state_selected_a) &
        (allocations_by_year['Year'] >= start_year) &
        (allocations_by_year['Year'] <= end_year)
    ]
    filtered_data_b = allocations_by_year[
        (allocations_by_year['State'] == state_selected_b) &
        (allocations_by_year['Year'] >= start_year) &
        (allocations_by_year['Year'] <= end_year)
    ]

    if plot_type == 1:
        # Create yearly line plot for total sum
        summed_data_a = filtered_data_a.groupby('Year')['Allocation'].sum().reset_index()
        summed_data_b = filtered_data_b.groupby('Year')['Allocation'].sum().reset_index()
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(summed_data_a['Year'], summed_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Total Sum")
        ax.plot(summed_data_b['Year'], summed_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Total Sum")
        ax.set_title('Total Allocations by State Over the Years')
    else:
        # Create yearly line plot for average
        avg_data_a = filtered_data_a.groupby('Year')['Allocation'].mean().reset_index()
        avg_data_b = filtered_data_b.groupby('Year')['Allocation'].mean().reset_index()
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(avg_data_a['Year'], avg_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Average")
        ax.plot(avg_data_b['Year'], avg_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Average")
        ax.set_title('Average Allocations by State Over the Years')

ax.set_xlabel('Year' if start_year != end_year else 'Month')
ax.set_ylabel('Total Allocation')
ax.legend()
ax.grid(True)
plt.xticks(rotation=45)

# Display the plot
plt.show()

# Define the order of months for proper plotting
month_order = ['2023-01', '2023-02', '2023-03', '2023-04', '2023-05', '2023-06',
               '2023-07', '2023-08', '2023-09', '2023-10', '2023-11', '2023-12']

# Melt the DataFrame to long format for easier manipulation
df_melted = df.melt(id_vars=['State', 'Region'], var_name='Date', value_name='Allocation')

# Convert Date column to datetime format
df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# Extract the year and month from the Date column
df_melted['Year'] = df_melted['Date'].dt.year
df_melted['Month'] = df_melted['Date'].dt.strftime('%Y-%m')

# Now `df_melted` is the DataFrame we'll use
allocations_by_year = df_melted

# Get unique states and years from the DataFrame
unique_states = allocations_by_year['State'].unique()
unique_years = allocations_by_year['Year'].unique()

# Function to select a state with input validation
def select_state(prompt):
    while True:
        print(prompt)
        for i, state in enumerate(unique_states, 1):
            print(f"{i}. {state}")
        try:
            state_index = int(input("Enter the number corresponding to the state: ")) - 1
            if 0 <= state_index < len(unique_states):
                return unique_states[state_index]
            else:
                print("Invalid selection. Please select a valid number.")
        except ValueError:
            print("Invalid input. Please enter a number.")

# Prompt user to select the first state
state_selected_a = select_state("Select the first state from the following options:")

# Prompt user to select the second state
state_selected_b = select_state("Select the second state from the following options:")

# Prompt user to select the year range
while True:
    try:
        print(f"Select a year range between {min(unique_years)} and {max(unique_years)}")
        start_year = int(input("Enter the start year: "))
        end_year = int(input("Enter the end year: "))
        if start_year in unique_years and end_year in unique_years and start_year <= end_year:
            break
        else:
            print("Invalid year range. Please enter a valid range.")
    except ValueError:
        print("Invalid input. Please enter a number.")

# Prompt user to select whether they want the total sum or average
while True:
    print("Select the type of plot:")
    print("1. Total Sum")
    print("2. Average")
    try:
        plot_type = int(input("Enter the number corresponding to your choice: "))
        if plot_type in [1, 2]:
            break
        else:
            print("Invalid selection. Please select a valid number.")
    except ValueError:
        print("Invalid input. Please enter a number.")

# Check if start year and end year are the same
if start_year == end_year:
    # Filter data by month within the selected year for both states
    filtered_data_a = allocations_by_year[
        (allocations_by_year['State'] == state_selected_a) &
        (allocations_by_year['Year'] == start_year)
    ]
    filtered_data_b = allocations_by_year[
        (allocations_by_year['State'] == state_selected_b) &
        (allocations_by_year['Year'] == start_year)
    ]

    if plot_type == 1:
        # Create monthly line plot for total sum
        summed_data_a = filtered_data_a.groupby('Month')['Allocation'].sum().reindex(month_order).fillna(0)
        summed_data_b = filtered_data_b.groupby('Month')['Allocation'].sum().reindex(month_order).fillna(0)
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(summed_data_a.index, summed_data_a.values, marker='o', label=f"{state_selected_a} - Total Sum")
        ax.plot(summed_data_b.index, summed_data_b.values, marker='o', label=f"{state_selected_b} - Total Sum")
        ax.set_title(f'Total Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
    else:
        # Create monthly line plot for average
        avg_data_a = filtered_data_a.groupby('Month')['Allocation'].mean().reindex(month_order).fillna(0)
        avg_data_b = filtered_data_b.groupby('Month')['Allocation'].mean().reindex(month_order).fillna(0)
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(avg_data_a.index, avg_data_a.values, marker='o', label=f"{state_selected_a} - Average")
        ax.plot(avg_data_b.index, avg_data_b.values, marker='o', label=f"{state_selected_b} - Average")
        ax.set_title(f'Average Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
else:
    # Filter data based on user selection for yearly plot
    filtered_data_a = allocations_by_year[
        (allocations_by_year['State'] == state_selected_a) &
        (allocations_by_year['Year'] >= start_year) &
        (allocations_by_year['Year'] <= end_year)
    ]
    filtered_data_b = allocations_by_year[
        (allocations_by_year['State'] == state_selected_b) &
        (allocations_by_year['Year'] >= start_year) &
        (allocations_by_year['Year'] <= end_year)
    ]

    if plot_type == 1:
        # Create yearly line plot for total sum
        summed_data_a = filtered_data_a.groupby('Year')['Allocation'].sum().reset_index()
        summed_data_b = filtered_data_b.groupby('Year')['Allocation'].sum().reset_index()
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(summed_data_a['Year'], summed_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Total Sum")
        ax.plot(summed_data_b['Year'], summed_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Total Sum")
        ax.set_title('Total Allocations by State Over the Years')
    else:
        # Create yearly line plot for average
        avg_data_a = filtered_data_a.groupby('Year')['Allocation'].mean().reset_index()
        avg_data_b = filtered_data_b.groupby('Year')['Allocation'].mean().reset_index()
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(avg_data_a['Year'], avg_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Average")
        ax.plot(avg_data_b['Year'], avg_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Average")
        ax.set_title('Average Allocations by State Over the Years')

ax.set_xlabel('Year' if start_year != end_year else 'Month')
ax.set_ylabel('Total Allocation')
ax.legend()
ax.grid(True)
plt.xticks(rotation=45)

# Display the plot
plt.show()

# @title
# allocations_by_year = df_melted

# # Get unique states and years from the DataFrame
# unique_states = allocations_by_year['State'].unique()
# unique_years = allocations_by_year['Year'].unique()

# # Prompt user to select the first state
# print("Select the first state from the following options:")
# for i, state in enumerate(unique_states, 1):
#     print(f"{i}. {state}")

# state_index_a = int(input("Enter the number corresponding to the first state: ")) - 1
# state_selected_a = unique_states[state_index_a]

# # Prompt user to select the second state
# print("Select the second state from the following options:")
# for i, state in enumerate(unique_states, 1):
#     print(f"{i}. {state}")

# state_index_b = int(input("Enter the number corresponding to the second state: ")) - 1
# state_selected_b = unique_states[state_index_b]

# # Prompt user to select a year range
# print(f"Select a year range between {min(unique_years)} and {max(unique_years)}")
# start_year = int(input("Enter the start year: "))
# end_year = int(input("Enter the end year: "))

# # Filter data based on user selection for both states
# filtered_data_a = allocations_by_year[
#     (allocations_by_year['State'] == state_selected_a) &
#     (allocations_by_year['Year'] >= start_year) &
#     (allocations_by_year['Year'] <= end_year)
# ]

# filtered_data_b = allocations_by_year[
#     (allocations_by_year['State'] == state_selected_b) &
#     (allocations_by_year['Year'] >= start_year) &
#     (allocations_by_year['Year'] <= end_year)
# ]

# # Check if the start and end years are the same
# if start_year == end_year:
#     # Aggregate data by month
#     monthly_data_a = filtered_data_a.groupby('Month')['Allocation'].sum().sort_index()
#     monthly_data_b = filtered_data_b.groupby('Month')['Allocation'].sum().sort_index()

#     # Create monthly line plot
#     fig, ax = plt.subplots(figsize=(20, 8))
#     ax.plot(monthly_data_a.index, monthly_data_a.values, marker='o', label=f"{state_selected_a} - {start_year}")
#     ax.plot(monthly_data_b.index, monthly_data_b.values, marker='o', label=f"{state_selected_b} - {start_year}")
#     ax.set_title(f'Total Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
#     ax.set_xlabel('Month')
#     ax.set_ylabel('Total Allocation')
#     ax.legend()
#     ax.grid(True)
#     plt.xticks(rotation=45)
#     plt.tight_layout()
# else:
#     # Aggregate data by year
#     yearly_data_a = filtered_data_a.groupby('Year')['Allocation'].sum().sort_index()
#     yearly_data_b = filtered_data_b.groupby('Year')['Allocation'].sum().sort_index()

#     # Create yearly line plot
#     fig, ax = plt.subplots(figsize=(20, 8))
#     ax.plot(yearly_data_a.index, yearly_data_a.values, marker='o', label=state_selected_a)
#     ax.plot(yearly_data_b.index, yearly_data_b.values, marker='o', label=state_selected_b)
#     ax.set_title(f'Total Allocations by Year for {state_selected_a} and {state_selected_b}')
#     ax.set_xlabel('Year')
#     ax.set_ylabel('Total Allocation')
#     ax.legend()
#     ax.grid(True)
#     plt.xticks(rotation=45)
#     plt.tight_layout()

# # Display the plot
# plt.show()

# @title
# allocations_by_year = df_melted

# # Get unique states and years from the DataFrame
# unique_states = allocations_by_year['State'].unique()
# unique_years = allocations_by_year['Year'].unique()

# # Prompt user to select the first state
# print("Select the first state from the following options:")
# for i, state in enumerate(unique_states, 1):
#     print(f"{i}. {state}")

# state_index_a = int(input("Enter the number corresponding to the first state: ")) - 1
# state_selected_a = unique_states[state_index_a]

# # Prompt user to select the second state
# print("Select the second state from the following options:")
# for i, state in enumerate(unique_states, 1):
#     print(f"{i}. {state}")

# state_index_b = int(input("Enter the number corresponding to the second state: ")) - 1
# state_selected_b = unique_states[state_index_b]

# # Prompt user to select a year range
# print(f"Select a year range between {min(unique_years)} and {max(unique_years)}")
# start_year = int(input("Enter the start year: "))
# end_year = int(input("Enter the end year: "))

# # Filter data based on user selection for both states
# filtered_data_a = allocations_by_year[
#     (allocations_by_year['State'] == state_selected_a) &
#     (allocations_by_year['Year'] >= start_year) &
#     (allocations_by_year['Year'] <= end_year)
# ]

# filtered_data_b = allocations_by_year[
#     (allocations_by_year['State'] == state_selected_b) &
#     (allocations_by_year['Year'] >= start_year) &
#     (allocations_by_year['Year'] <= end_year)
# ]

# # Check if the selected year range is within the same year
# if start_year == end_year:
#     # Add a 'Month' column if not already present
#     if 'Month' not in allocations_by_year.columns:
#         allocations_by_year['Month'] = pd.to_datetime(allocations_by_year['Date']).dt.month_name()

#     # Filter data for the selected year and include month information
#     filtered_data_a = filtered_data_a.groupby(['Month'])['Allocation'].sum().reindex(month_order)
#     filtered_data_b = filtered_data_b.groupby(['Month'])['Allocation'].sum().reindex(month_order)

#     # Create monthly trend plot
#     fig, ax = plt.subplots(figsize=(14, 8))
#     ax.plot(filtered_data_a.index, filtered_data_a.values, label=state_selected_a)
#     ax.plot(filtered_data_b.index, filtered_data_b.values, label=state_selected_b)
#     ax.set_title(f'Monthly Allocations by {state_selected_a} vs {state_selected_b} in {start_year}')
#     ax.set_xlabel('Month')
#     ax.set_ylabel('Total Allocation')
#     ax.legend()
#     ax.grid(True)
#     plt.xticks(rotation=45)

# else:
#     # Create yearly trend plot
#     fig, ax = plt.subplots(figsize=(22, 8))
#     ax.plot(filtered_data_a['Year'], filtered_data_a['Allocation'], label=state_selected_a)
#     ax.plot(filtered_data_b['Year'], filtered_data_b['Allocation'], label=state_selected_b)
#     ax.set_title(f'Total Allocations by {state_selected_a} vs {state_selected_b} Over the Years')
#     ax.set_xlabel('Year')
#     ax.set_ylabel('Total Allocation')
#     ax.legend()
#     ax.grid(True)
#     plt.xticks(rotation=45)

# # Display the plot
# plt.show()

# @title
# # Melt the dataframe to long format for easier manipulation
# df_melted = df.melt(id_vars=['State', 'Region'], var_name='Date', value_name='Allocation')

# # Convert Date column to datetime format
# df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# # Extract the year from the Date column
# df_melted['Year'] = df_melted['Date'].dt.year

# # Group by state and year, and sum the allocations
# allocations_by_year = df_melted.groupby(['State', 'Year'])['Allocation'].sum().reset_index()

# # Create the plot
# fig = px.line(allocations_by_year, x='Year', y='Allocation', color='State') #, title='Total Allocations by State Over the Years')

# # Update the layout to handle long labels and improve readability
# fig.update_layout(
#     autosize=False,
#     width=1000,
#     height=600,
#     legend=dict(
#         orientation="h",
#         yanchor="bottom",
#         y=1.02,
#         xanchor="right",
#         x=1
#     ),
#     margin=dict(l=20, r=20, t=50, b=20),
#     xaxis=dict(
#         title='Year',
#         tickangle=45
#     ),
#     yaxis=dict(
#         title='Total Allocation'
#     )
# )

# fig.show()

# @title
# # Melt the dataframe to long format for easier manipulation
# df_melted = df.melt(id_vars=['State', 'Region'], var_name='Date', value_name='Allocation')

# # Convert Date column to datetime format
# df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# # Extract the year from the Date column
# df_melted['Year'] = df_melted['Date'].dt.year

# # Group by state and year, and sum the allocations
# allocations_by_year = df_melted.groupby(['State', 'Year'])['Allocation'].mean().reset_index()

# # Create the plot
# fig = px.line(allocations_by_year, x='Year', y='Allocation', color='State') #, title='Total Allocations by State Over the Years')

# # Update the layout to handle long labels and improve readability
# fig.update_layout(
#     autosize=False,
#     width=1000,
#     height=600,
#     legend=dict(
#         orientation="h",
#         yanchor="bottom",
#         y=1.02,
#         xanchor="right",
#         x=1
#     ),
#     margin=dict(l=20, r=20, t=50, b=20),
#     xaxis=dict(
#         title='Year',
#         tickangle=45
#     ),
#     yaxis=dict(
#         title='Total Allocation'
#     )
# )

# fig.show()

# @title
# Group by state and year, and sum the allocations
allocations_by_region = df_melted.groupby(['Region', 'Year'])['Allocation'].sum().reset_index()

allocations_by_region.head()

# Create the plot
fig = px.line(allocations_by_region, x='Year', y='Allocation', color='Region') #, title='Total Allocations by State Over the Years')

# Update the layout to handle long labels and improve readability
fig.update_layout(
    autosize=False,
    width=1650,
    height=600,
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    ),
    margin=dict(l=20, r=20, t=50, b=20),
    xaxis=dict(
        title='Year',
        tickangle=45
    ),
    yaxis=dict(
        title='Total Allocation'
    )
)

fig.show()

# @title
# fig = px.bar(
#     allocations_by_region,
#     x='Allocation',
#     y='Year',
#     color='Region',
#     orientation='h',  # Horizontal bar plot
#     barmode='group'  # Group bars by regions
# )

# # Update the layout to handle long labels and improve readability
# fig.update_layout(
#     autosize=False,
#     width=1300,
#     height=1600,
#     legend=dict(
#         orientation="h",
#         yanchor="bottom",
#         y=1.02,
#         xanchor="right",
#         x=1
#     ),
#     margin=dict(l=20, r=20, t=50, b=20),
#     xaxis=dict(
#         title='Total Allocation by Region'
#     ),
#     yaxis=dict(
#         title='Year',
#         tickangle=0  # Vertical y-axis labels
#     )
# )

# fig.show()

# Create the bar plot using Seaborn
plt.figure(figsize=(13, 16))  # Set figure size
sns.barplot(
    data=allocations_by_region,
    x='Allocation',
    y='Year',
    hue='Region',
    orient='h'  # Horizontal bar plot
)

# Update the layout for better readability
plt.xlabel('Total Allocation by Region')
plt.ylabel('Year')
plt.legend(title='Region', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=45)  # Rotate x-axis labels for readability
plt.tight_layout()  # Adjust subplot parameters to fit into figure area.

# Show plot
plt.show()

# @title
# # prompt: i want to do regional analysis, where a subset is done based oon region and descriptiva analysis is done on the subsets that is for example, a  df_south_west will be created out of the entire df and analysis done on the states from south west

# def regional_analysis(df, region_name):


#   # Create a subset of the DataFrame for the specified region
#   region_df = df[df['Region'] == region_name]

#   # Perform descriptive analysis on the regional subset
#   print(f"Descriptive Analysis for {region_name}:")
#   display(region_df.describe())



#   return region_df

# # Example usage:
# df_south_west = regional_analysis(df, 'South West')
# df_north_east = regional_analysis(df, 'North East')
# df_north_west = regional_analysis(df, 'North West')
# df_north_central = regional_analysis(df, 'North Central')
# df_south_south = regional_analysis(df, 'South South')
# df_south_east = regional_analysis(df, 'South East')



# Function to extract the month from the date
def extract_month(date):
    return date.month

# Function to perform regional analysis with enhanced visualizations
def regional_analysis(df, region_name):
    # Create a subset of the DataFrame for the specified region
    region_df = df[df['Region'] == region_name]

    # Extract the month from the date
    region_df['Month'] = region_df['Date'].dt.month

    # Aggregating data to get the total allocation per year
    region_agg_year = region_df.groupby(['Year', 'State'])['Allocation'].sum().reset_index()

    # Plot the trend for each state in the region by year
    fig_year = px.line(region_agg_year, x='Year', y='Allocation', color='State', title=f'Total Allocations by State Over the Years in {region_name}')
    fig_year.update_layout(xaxis_title='Year', yaxis_title='Total Allocation', legend_title='State')
    fig_year.show()

    return region_df

df_south_west = regional_analysis(df_melted, 'South West')

df_north_east = regional_analysis(df_melted, 'North East')

df_north_west = regional_analysis(df_melted, 'North West')

df_north_central = regional_analysis(df_melted, 'North Central')

df_south_south = regional_analysis(df_melted, 'South South')

df_south_east = regional_analysis(df_melted, 'South East')

top_states_by_region = df_melted.loc[df_melted.groupby('Region')['Allocation'].idxmax()]

# Sort the result by Allocation
top_states_by_region = top_states_by_region.sort_values(by='Allocation', ascending=False)

# Create the bar plot using Plotly
fig = px.bar(
    top_states_by_region,
    x='State',
    y='Allocation',
    color='Region',
    labels={'Allocation': 'Total Allocation'},
    title='Top States with Most Allocation from Each Region',
    template='plotly_white',
    color_discrete_sequence=px.colors.qualitative.Plotly
)

# Customize the layout for better readability
fig.update_layout(
    autosize=False,
    width=1650,
    height=600,
    xaxis_title='State',
    yaxis_title='Total Allocation',
    xaxis_tickangle=-90,
    title_font=dict(size=24, family='Arial', color='black'),
    xaxis=dict(tickfont=dict(size=12)),
    yaxis=dict(tickfont=dict(size=12)),
    legend_title_text='Region'
)

# Show the plot
fig.show()

# @title
lgas = pd.read_excel('FAAC DATA - Data Community.xlsx', sheet_name='LGA')
lgas.head()

# @title
# cols = ['2021-03-01 00:00:00', '2021-04-01 00:00:00', '2021-05-01 00:00:00', '2021-06-01 00:00:00', '2021-07-01 00:00:00', '2021-08-01 00:00:00', '2021-09-01 00:00:00', '2021-10-01 00:00:00', '2021-11-01 00:00:00']
for col in lgas.columns:
    if lgas[col].isna().sum() == 776:
        lgas = lgas.drop(columns=col) # Remove inplace=True and assignment
lgas.head()

# @title
for col in lgas[2:]:
    if lgas[col].isna().sum() > 0:
        # Attempt to convert the column to numeric, coercing errors to NaN
        lgas[col] = pd.to_numeric(lgas[col], errors='coerce')
        lgas[col].fillna(np.mean(lgas[col]), inplace=True)
lgas.head()

# @title
lgas.head()

# @title
lgas['STATE'] = lgas.STATE.str.capitalize()

regions = {
    'North Central': ['Benue', 'Kogi', 'Kwara', 'Nasarawa', 'Niger', 'Plateau', 'Federal Capital Territory'],
    'North East': ['Adamawa', 'Bauchi', 'Borno', 'Gombe', 'Taraba', 'Yobe'],
    'North West': ['Jigawa', 'Kaduna', 'Kano', 'Katsina', 'Kebbi', 'Sokoto', 'Zamfara'],
    'South East': ['Abia', 'Anambra', 'Ebonyi', 'Enugu', 'Imo'],
    'South South': ['Akwa Ibom', 'Bayelsa', 'Cross River', 'Delta', 'Edo', 'Rivers'],
    'South West': ['Ekiti', 'Lagos', 'Ogun', 'Ondo', 'Osun', 'Oyo']
}

# Reverse mapping for convenience
state_to_region = {STATE: region for region, states in regions.items() for STATE in states}

# Add a 'Region' column to the DataFrame
lgas['Region'] = lgas['STATE'].map(state_to_region)
lgas.head()

# Calculate the total allocations by state, excluding the 'Region' column
total_allocations_by_state = lgas.set_index(['STATE', 'LGC']).drop('Region', axis=1).apply(pd.to_numeric, errors='coerce').sum(axis=1).sort_values(ascending=False).head(10)

# Plotting the total allocations by state
import matplotlib.pyplot as plt

plt.figure(figsize=(23, 8))
total_allocations_by_state.plot(kind='bar')
plt.title('Top Ten (10) LGC with Most Total Allocations')
plt.xlabel('States and LGC')
plt.ylabel('Total Allocation')
plt.show()

numeric_columns = lgas.select_dtypes(include=np.number).columns
lgas[numeric_columns] = lgas[numeric_columns].apply(pd.to_numeric, errors='coerce')

# Create a function to plot allocations by LGCs
def plot_allocations_by_lgc(state):
    filtered_data = lgas[lgas['STATE'] == state.capitalize()]
    total_allocations_by_lgc = filtered_data.set_index('LGC')[numeric_columns].sum(axis=1).sort_values(ascending=False)

    # Plotting the total allocations by LGC
    plt.figure(figsize=(20, 8))
    total_allocations_by_lgc.plot(kind='bar')
    plt.title(f'Total Allocations by LGC in {state.capitalize()} (2007-2024)')
    plt.xlabel('LGC')
    plt.ylabel('Total Allocation')
    plt.xticks(rotation=90)
    plt.show()

# List of unique states
unique_states = sorted(lgas['STATE'].unique())

# Default state is Abia
default_state = 'Abia'

# Prompt user to enter a state name
state_selected = input(f"Enter the name of a state (default is '{default_state.capitalize()}'): ") or default_state

state_selected = state_selected.capitalize()

# Validate the state input
if state_selected not in unique_states:
    print(f"Invalid state name. Defaulting to '{default_state.capitalize()}'.")
    state_selected = default_state

# Plot allocations for the selected state
plot_allocations_by_lgc(state_selected.capitalize())

# Define the order of months for proper plotting
month_order = ['2023-01', '2023-02', '2023-03', '2023-04', '2023-05', '2023-06',
               '2023-07', '2023-08', '2023-09', '2023-10', '2023-11', '2023-12']

# Melt the DataFrame to long format for easier manipulation
df_melted = lgas.melt(id_vars=['STATE', 'LGC', 'Region'], var_name='Date', value_name='Allocation')

# Convert Date column to datetime format
df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# Extract the year and month from the Date column
df_melted['Year'] = df_melted['Date'].dt.year
df_melted['Month'] = df_melted['Date'].dt.strftime('%Y-%m')

# Now `df_melted` is the DataFrame we'll use
allocations_by_year = df_melted

# Get unique states and years from the DataFrame
# unique_states = allocations_by_year['LGC'].unique()
unique_states = [lgc.upper() for lgc in allocations_by_year['LGC'].unique()]
unique_years = allocations_by_year['Year'].unique()

# Function to select a state with input validation
def select_state(prompt):
    while True:
        print(prompt)
        state_input = input("Enter the name of the LGC: ").upper()
        if state_input in unique_states:
            return state_input
        else:
            print("Invalid selection. Please enter a valid LGC name.")

# Prompt user to select the first state
state_selected_a = select_state("Select the first LGC from the following options:")

# Prompt user to select the second state
state_selected_b = select_state("Select the second LGC from the following options:")


# Prompt user to select the year range
while True:
    try:
        print(f"Select a year range between {min(unique_years)} and {max(unique_years)}")
        start_year = int(input("Enter the start year: "))
        end_year = int(input("Enter the end year: "))
        if start_year in unique_years and end_year in unique_years and start_year <= end_year:
            break
        else:
            print("Invalid year range. Please enter a valid range.")
    except ValueError:
        print("Invalid input. Please enter a number.")

# Prompt user to select whether they want the total sum or average
while True:
    print("Select the type of plot:")
    print("1. Total Sum")
    print("2. Average")
    try:
        plot_type = int(input("Enter the number corresponding to your choice: "))
        if plot_type in [1, 2]:
            break
        else:
            print("Invalid selection. Please select a valid number.")
    except ValueError:
        print("Invalid input. Please enter a number.")

# Check if start year and end year are the same
if start_year == end_year:
    # Filter data by month within the selected year for both states
    filtered_data_a = allocations_by_year[
        (allocations_by_year['LGC'] == state_selected_a) &
        (allocations_by_year['Year'] == start_year)
    ]
    filtered_data_b = allocations_by_year[
        (allocations_by_year['LGC'] == state_selected_b) &
        (allocations_by_year['Year'] == start_year)
    ]

    if plot_type == 1:
        # Create monthly line plot for total sum
        summed_data_a = filtered_data_a.groupby('Month')['Allocation'].sum().reindex(month_order).fillna(0)
        summed_data_b = filtered_data_b.groupby('Month')['Allocation'].sum().reindex(month_order).fillna(0)
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(summed_data_a.index, summed_data_a.values, marker='o', label=f"{state_selected_a} - Total Sum")
        ax.plot(summed_data_b.index, summed_data_b.values, marker='o', label=f"{state_selected_b} - Total Sum")
        ax.set_title(f'Total Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
    else:
        # Create monthly line plot for average
        avg_data_a = filtered_data_a.groupby('Month')['Allocation'].mean().reindex(month_order).fillna(0)
        avg_data_b = filtered_data_b.groupby('Month')['Allocation'].mean().reindex(month_order).fillna(0)
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(avg_data_a.index, avg_data_a.values, marker='o', label=f"{state_selected_a} - Average")
        ax.plot(avg_data_b.index, avg_data_b.values, marker='o', label=f"{state_selected_b} - Average")
        ax.set_title(f'Average Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
else:
    # Filter data based on user selection for yearly plot
    filtered_data_a = allocations_by_year[
        (allocations_by_year['LGC'] == state_selected_a) &
        (allocations_by_year['Year'] >= start_year) &
        (allocations_by_year['Year'] <= end_year)
    ]
    filtered_data_b = allocations_by_year[
        (allocations_by_year['LGC'] == state_selected_b) &
        (allocations_by_year['Year'] >= start_year) &
        (allocations_by_year['Year'] <= end_year)
    ]

    if plot_type == 1:
        # Create yearly line plot for total sum
        summed_data_a = filtered_data_a.groupby('Year')['Allocation'].sum().reset_index()
        summed_data_b = filtered_data_b.groupby('Year')['Allocation'].sum().reset_index()
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(summed_data_a['Year'], summed_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Total Sum")
        ax.plot(summed_data_b['Year'], summed_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Total Sum")
        ax.set_title('Total Allocations by LGC Over the Years')
    else:
        # Create yearly line plot for average
        avg_data_a = filtered_data_a.groupby('Year')['Allocation'].mean().reset_index()
        avg_data_b = filtered_data_b.groupby('Year')['Allocation'].mean().reset_index()
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(avg_data_a['Year'], avg_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Average")
        ax.plot(avg_data_b['Year'], avg_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Average")
        ax.set_title('Average Allocations by LGC Over the Years')

ax.set_xlabel('Year' if start_year != end_year else 'Month')
ax.set_ylabel('Total Allocation')
ax.legend()
ax.grid(True)
plt.xticks(rotation=45)

# Display the plot
plt.show()

# Define the order of months for proper plotting
month_order = ['2023-01', '2023-02', '2023-03', '2023-04', '2023-05', '2023-06',
               '2023-07', '2023-08', '2023-09', '2023-10', '2023-11', '2023-12']

# Melt the DataFrame to long format for easier manipulation
df_melted = lgas.melt(id_vars=['STATE', 'LGC', 'Region'], var_name='Date', value_name='Allocation')

# Convert Date column to datetime format
df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# Extract the year and month from the Date column
df_melted['Year'] = df_melted['Date'].dt.year
df_melted['Month'] = df_melted['Date'].dt.strftime('%Y-%m')

# Now `df_melted` is the DataFrame we'll use
allocations_by_year = df_melted

# Get unique states and years from the DataFrame
# unique_states = allocations_by_year['LGC'].unique()
unique_states = [lgc.upper() for lgc in allocations_by_year['LGC'].unique()]
unique_years = allocations_by_year['Year'].unique()

# Function to select a state with input validation
def select_state(prompt):
    while True:
        print(prompt)
        state_input = input("Enter the name of the LGC: ").upper()
        if state_input in unique_states:
            return state_input
        else:
            print("Invalid selection. Please enter a valid LGC name.")

# Prompt user to select the first state
state_selected_a = select_state("Select the first LGC from the following options:")

# Prompt user to select the second state
# state_selected_b = select_state("Select the second LGC from the following options:")


# Prompt user to select the year range
while True:
    try:
        print(f"Select a year range between {min(unique_years)} and {max(unique_years)}")
        start_year = int(input("Enter the start year: "))
        end_year = int(input("Enter the end year: "))
        if start_year in unique_years and end_year in unique_years and start_year <= end_year:
            break
        else:
            print("Invalid year range. Please enter a valid range.")
    except ValueError:
        print("Invalid input. Please enter a number.")

# Prompt user to select whether they want the total sum or average
while True:
    print("Select the type of plot:")
    print("1. Total Sum")
    print("2. Average")
    try:
        plot_type = int(input("Enter the number corresponding to your choice: "))
        if plot_type in [1, 2]:
            break
        else:
            print("Invalid selection. Please select a valid number.")
    except ValueError:
        print("Invalid input. Please enter a number.")

# Check if start year and end year are the same
if start_year == end_year:
    # Filter data by month within the selected year for both states
    filtered_data_a = allocations_by_year[
        (allocations_by_year['LGC'] == state_selected_a)
    #     &
    #     (allocations_by_year['Year'] == start_year)
    # ]
    # filtered_data_b = allocations_by_year[
    #     (allocations_by_year['LGC'] == state_selected_b) &
    #     (allocations_by_year['Year'] == start_year)
    ]

    if plot_type == 1:
        # Create monthly line plot for total sum
        summed_data_a = filtered_data_a.groupby('Month')['Allocation'].sum().reindex(month_order).fillna(0)
        # summed_data_b = filtered_data_b.groupby('Month')['Allocation'].sum().reindex(month_order).fillna(0)
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(summed_data_a.index, summed_data_a.values, marker='o', label=f"{state_selected_a} - Total Sum")
        # ax.plot(summed_data_b.index, summed_data_b.values, marker='o', label=f"{state_selected_b} - Total Sum")
        ax.set_title(f'Total Allocations by Month for {state_selected_a} in {start_year}') #and {state_selected_b} in {start_year}')
    else:
        # Create monthly line plot for average
        avg_data_a = filtered_data_a.groupby('Month')['Allocation'].mean().reindex(month_order).fillna(0)
        # avg_data_b = filtered_data_b.groupby('Month')['Allocation'].mean().reindex(month_order).fillna(0)
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(avg_data_a.index, avg_data_a.values, marker='o', label=f"{state_selected_a} - Average")
       # ax.plot(avg_data_b.index, avg_data_b.values, marker='o', label=f"{state_selected_b} - Average")
        ax.set_title(f'Average Allocations by Month for {state_selected_a} in {start_year}') # and {state_selected_b} in {start_year}')
else:
    # Filter data based on user selection for yearly plot
    filtered_data_a = allocations_by_year[
        (allocations_by_year['LGC'] == state_selected_a) &
        (allocations_by_year['Year'] >= start_year) &
        (allocations_by_year['Year'] <= end_year)
    ]
    # filtered_data_b = allocations_by_year[
    #     (allocations_by_year['LGC'] == state_selected_b) &
    #     (allocations_by_year['Year'] >= start_year) &
    #     (allocations_by_year['Year'] <= end_year)
    # ]

    if plot_type == 1:
        # Create yearly line plot for total sum
        summed_data_a = filtered_data_a.groupby('Year')['Allocation'].sum().reset_index()
       # summed_data_b = filtered_data_b.groupby('Year')['Allocation'].sum().reset_index()
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(summed_data_a['Year'], summed_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Total Sum")
       # ax.plot(summed_data_b['Year'], summed_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Total Sum")
        ax.set_title(f'Total Allocations for {state_selected_a} Over the Years')
    else:
        # Create yearly line plot for average
        avg_data_a = filtered_data_a.groupby('Year')['Allocation'].mean().reset_index()
       # avg_data_b = filtered_data_b.groupby('Year')['Allocation'].mean().reset_index()
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(avg_data_a['Year'], avg_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Average")
       # ax.plot(avg_data_b['Year'], avg_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Average")
        ax.set_title(f'Average Allocations for {state_selected_a} Over the Years')

ax.set_xlabel('Year' if start_year != end_year else 'Month')
ax.set_ylabel('Total Allocation')
ax.legend()
ax.grid(True)
plt.xticks(rotation=45)

# Display the plot
plt.show()

# Define the order of months for proper plotting
month_order = ['2023-01', '2023-02', '2023-03', '2023-04', '2023-05', '2023-06',
               '2023-07', '2023-08', '2023-09', '2023-10', '2023-11', '2023-12']

# Melt the DataFrame to long format for easier manipulation
df_melted = df.melt(id_vars=['State', 'Region'], var_name='Date', value_name='Allocation')

# Convert Date column to datetime format
df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# Extract the year and month from the Date column
df_melted['Year'] = df_melted['Date'].dt.year
df_melted['Month'] = df_melted['Date'].dt.strftime('%Y-%m')

# Now `df_melted` is the DataFrame we'll use
allocations_by_year = df_melted

# Get unique states and years from the DataFrame
# unique_states = allocations_by_year['LGC'].unique()
unique_states = [lgc.capitalize() for lgc in allocations_by_year['State'].unique()]
unique_years = allocations_by_year['Year'].unique()

# Function to select a state with input validation
def select_state(prompt):
    while True:
        print(prompt)
        state_input = str(input("Enter the name of the State: "))
        state_input = state_input.capitalize()
        if state_input in unique_states:
            return state_input
        else:
            print("Invalid selection. Please enter a valid State name.")

# Prompt user to select the first state
state_selected_a = select_state("Select the first State from the following options:")


# Prompt user to select the year range
while True:
    try:
        print(f"Select a year range between {min(unique_years)} and {max(unique_years)}")
        start_year = int(input("Enter the start year: "))
        end_year = int(input("Enter the end year: "))
        if start_year in unique_years and end_year in unique_years and start_year <= end_year:
            break
        else:
            print("Invalid year range. Please enter a valid range.")
    except ValueError:
        print("Invalid input. Please enter a number.")

# Prompt user to select whether they want the total sum or average
while True:
    print("Select the type of plot:")
    print("1. Total Sum")
    print("2. Average")
    try:
        plot_type = int(input("Enter the number corresponding to your choice: "))
        if plot_type in [1, 2]:
            break
        else:
            print("Invalid selection. Please select a valid number.")
    except ValueError:
        print("Invalid input. Please enter a number.")

# Check if start year and end year are the same
if start_year == end_year:
    # Filter data by month within the selected year for both states
    filtered_data_a = allocations_by_year[
        (allocations_by_year['State'] == state_selected_a)
    #     &
    #     (allocations_by_year['Year'] == start_year)
    # ]
    # filtered_data_b = allocations_by_year[
    #     (allocations_by_year['LGC'] == state_selected_b) &
    #     (allocations_by_year['Year'] == start_year)
    ]

    if plot_type == 1:
        # Create monthly line plot for total sum
        summed_data_a = filtered_data_a.groupby('Month')['Allocation'].sum().reindex(month_order).fillna(0)
        # summed_data_b = filtered_data_b.groupby('Month')['Allocation'].sum().reindex(month_order).fillna(0)
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(summed_data_a.index, summed_data_a.values, marker='o', label=f"{state_selected_a} - Total Sum")
        # ax.plot(summed_data_b.index, summed_data_b.values, marker='o', label=f"{state_selected_b} - Total Sum")
        ax.set_title(f'Total Allocations by Month for {state_selected_a} in {start_year}') #and {state_selected_b} in {start_year}')
    else:
        # Create monthly line plot for average
        avg_data_a = filtered_data_a.groupby('Month')['Allocation'].mean().reindex(month_order).fillna(0)
        # avg_data_b = filtered_data_b.groupby('Month')['Allocation'].mean().reindex(month_order).fillna(0)
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(avg_data_a.index, avg_data_a.values, marker='o', label=f"{state_selected_a} - Average")
       # ax.plot(avg_data_b.index, avg_data_b.values, marker='o', label=f"{state_selected_b} - Average")
        ax.set_title(f'Average Allocations by Month for {state_selected_a} in {start_year}') # and {state_selected_b} in {start_year}')
else:
    # Filter data based on user selection for yearly plot
    filtered_data_a = allocations_by_year[
        (allocations_by_year['State'] == state_selected_a) &
        (allocations_by_year['Year'] >= start_year) &
        (allocations_by_year['Year'] <= end_year)
    ]
    # filtered_data_b = allocations_by_year[
    #     (allocations_by_year['LGC'] == state_selected_b) &
    #     (allocations_by_year['Year'] >= start_year) &
    #     (allocations_by_year['Year'] <= end_year)
    # ]

    if plot_type == 1:
        # Create yearly line plot for total sum
        summed_data_a = filtered_data_a.groupby('Year')['Allocation'].sum().reset_index()
       # summed_data_b = filtered_data_b.groupby('Year')['Allocation'].sum().reset_index()
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(summed_data_a['Year'], summed_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Total Sum")
       # ax.plot(summed_data_b['Year'], summed_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Total Sum")
        ax.set_title(f'Total Allocations for {state_selected_a} Over the Years')
    else:
        # Create yearly line plot for average
        avg_data_a = filtered_data_a.groupby('Year')['Allocation'].mean().reset_index()
       # avg_data_b = filtered_data_b.groupby('Year')['Allocation'].mean().reset_index()
        fig, ax = plt.subplots(figsize=(22, 8))
        ax.plot(avg_data_a['Year'], avg_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Average")
       # ax.plot(avg_data_b['Year'], avg_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Average")
        ax.set_title(f'Average Allocations for {state_selected_a} Over the Years')

ax.set_xlabel('Year' if start_year != end_year else 'Month')
ax.set_ylabel('Total Allocation')
ax.legend()
ax.grid(True)
plt.xticks(rotation=45)

# Display the plot
plt.show()

# @title
# # Melt the DataFrame to long format for easier manipulation
# df_melted = lgas.melt(id_vars=['LGC', 'Region'], var_name='Date', value_name='Allocation')

# # Convert Date column to datetime format with error handling
# df_melted['Date'] = pd.to_datetime(df_melted['Date'], errors='coerce')

# # Extract the year and month from the Date column
# df_melted['Year'] = df_melted['Date'].dt.year
# df_melted['Month'] = df_melted['Date'].dt.strftime('%Y-%m')

# # Now `df_melted` is the DataFrame we'll use
# allocations_by_year = df_melted

# # Get unique LGCs and years from the DataFrame
# unique_lgcs = [lgc.upper() for lgc in allocations_by_year['LGC'].unique()]
# unique_years = allocations_by_year['Year'].unique()

# # Function to select an LGC with input validation
# def select_lgc(prompt):
#     while True:
#         print(prompt)
#         for i, lgc in enumerate(unique_lgcs, 1):
#             print(f"{i}. {lgc}")
#         try:
#             lgc_input = input("Enter the name of the LGC: ").strip().upper()
#             if lgc_input in unique_lgcs:
#                 return lgc_input
#             else:
#                 print("Invalid LGC name. Please enter a valid LGC name.")
#         except ValueError:
#             print("Invalid input. Please enter a valid LGC name.")

# # Prompt user to select the first LGC
# state_selected_a = select_lgc("Select the first LGC from the following options:")

# # Prompt user to select the second LGC
# state_selected_b = select_lgc("Select the second LGC from the following options:")

# # Extract states for the selected LGCs
# state_a = lgas[lgas['LGC'].str.upper() == state_selected_a]['Region'].iloc[0]
# state_b = lgas[lgas['LGC'].str.upper() == state_selected_b]['Region'].iloc[0]

# # Prompt user to select a year range
# while True:
#     try:
#         print(f"Select a year range between {min(unique_years)} and {max(unique_years)}")
#         start_year = int(input("Enter the start year: "))
#         end_year = int(input("Enter the end year: "))
#         if start_year in unique_years and end_year in unique_years and start_year <= end_year:
#             break
#         else:
#             print("Invalid year range. Please enter a valid range.")
#     except ValueError:
#         print("Invalid input. Please enter a number.")

# # Prompt user to select whether they want the total sum or average
# while True:
#     print("Select the type of plot:")
#     print("1. Total Sum")
#     print("2. Average")
#     try:
#         plot_type = int(input("Enter the number corresponding to your choice: "))
#         if plot_type in [1, 2]:
#             break
#         else:
#             print("Invalid selection. Please select a valid number.")
#     except ValueError:
#         print("Invalid input. Please enter a number.")

# # Check if start year and end year are the same
# if start_year == end_year:
#     # Filter data by month within the selected year for both LGCs
#     filtered_data_a = allocations_by_year[
#         (allocations_by_year['LGC'] == state_selected_a) &
#         (allocations_by_year['Year'] == start_year)
#     ]
#     filtered_data_b = allocations_by_year[
#         (allocations_by_year['LGC'] == state_selected_b) &
#         (allocations_by_year['Year'] == start_year)
#     ]

#     if plot_type == 1:
#         # Create monthly line plot for total sum
#         fig, ax = plt.subplots(figsize=(22, 8))
#         ax.plot(filtered_data_a['Month'], filtered_data_a['Allocation'], marker='o', label=f"{state_selected_a} ({state_a})")
#         ax.plot(filtered_data_b['Month'], filtered_data_b['Allocation'], marker='o', label=f"{state_selected_b} ({state_b})")
#         ax.set_title(f'Total Allocations by Month for {state_selected_a} ({state_a}) and {state_selected_b} ({state_b}) in {start_year}')
#     else:
#         # Create monthly line plot for average
#         avg_data_a = filtered_data_a.groupby('Month')['Allocation'].mean().reset_index()
#         avg_data_b = filtered_data_b.groupby('Month')['Allocation'].mean().reset_index()
#         fig, ax = plt.subplots(figsize=(22, 8))
#         ax.plot(avg_data_a['Month'], avg_data_a['Allocation'], marker='o', label=f"{state_selected_a} ({state_a})")
#         ax.plot(avg_data_b['Month'], avg_data_b['Allocation'], marker='o', label=f"{state_selected_b} ({state_b})")
#         ax.set_title(f'Average Allocations by Month for {state_selected_a} ({state_a}) and {state_selected_b} ({state_b}) in {start_year}')
# else:
#     # Filter data based on user selection for yearly plot
#     filtered_data_a = allocations_by_year[
#         (allocations_by_year['LGC'] == state_selected_a) &
#         (allocations_by_year['Year'] >= start_year) &
#         (allocations_by_year['Year'] <= end_year)
#     ]
#     filtered_data_b = allocations_by_year[
#         (allocations_by_year['LGC'] == state_selected_b) &
#         (allocations_by_year['Year'] >= start_year) &
#         (allocations_by_year['Year'] <= end_year)
#     ]

#     if plot_type == 1:
#         # Create yearly line plot for total sum
#         fig, ax = plt.subplots(figsize=(22, 8))
#         ax.plot(filtered_data_a['Year'], filtered_data_a['Allocation'], marker='o', label=f"{state_selected_a} ({state_a})")
#         ax.plot(filtered_data_b['Year'], filtered_data_b['Allocation'], marker='o', label=f"{state_selected_b} ({state_b})")
#         ax.set_title('Total Allocations by LGC Over the Years')
#     else:
#         # Create yearly line plot for average
#         avg_data_a = filtered_data_a.groupby('Year')['Allocation'].mean().reset_index()
#         avg_data_b = filtered_data_b.groupby('Year')['Allocation'].mean().reset_index()
#         fig, ax = plt.subplots(figsize=(22, 8))
#         ax.plot(avg_data_a['Year'], avg_data_a['Allocation'], marker='o', label=f"{state_selected_a} ({state_a})")
#         ax.plot(avg_data_b['Year'], avg_data_b['Allocation'], marker='o', label=f"{state_selected_b} ({state_b})")
#         ax.set_title('Average Allocations by LGC Over the Years')

# ax.set_xlabel('Year' if start_year != end_year else 'Month')
# ax.set_ylabel('Total Allocation')
# ax.legend(title='LGC (State)')
# ax.grid(True)
# plt.xticks(rotation=45)

# # Display the plot
# plt.show()

# @title
# # Melt the DataFrame to long format for easier manipulation
# df_melted = lgas.melt(id_vars=['STATE', 'Region', 'LGC'], var_name='Date', value_name='Allocation')

# # Convert Date column to datetime format
# df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# # Extract the year and month from the Date column
# df_melted['Year'] = df_melted['Date'].dt.year
# df_melted['Month'] = df_melted['Date'].dt.strftime('%Y-%m')

# # Now `df_melted` is the DataFrame we'll use
# allocations_by_year = df_melted

# # Get unique states and years from the DataFrame
# unique_states = allocations_by_year['LGC'].unique()
# unique_years = allocations_by_year['Year'].unique()

# # Function to select a state with input validation
# def select_state(prompt):
#     while True:
#         print(prompt)
#         for i, state in enumerate(unique_states, 1):
#             print(f"{i}. {state}")
#         try:
#             state_index = int(input("Enter the number corresponding to the state: ")) - 1
#             if 0 <= state_index < len(unique_states):
#                 return unique_states[state_index]
#             else:
#                 print("Invalid selection. Please select a valid number.")
#         except ValueError:
#             print("Invalid input. Please enter a number.")

# # Prompt user to select the first state
# state_selected_a = select_state("Select the first LGC from the following options:")

# # Prompt user to select the second state
# state_selected_b = select_state("Select the second LGC from the following options:")

# # Prompt user to select the year range
# while True:
#     try:
#         print(f"Select a year range between {min(unique_years)} and {max(unique_years)}")
#         start_year = int(input("Enter the start year: "))
#         end_year = int(input("Enter the end year: "))
#         if start_year in unique_years and end_year in unique_years and start_year <= end_year:
#             break
#         else:
#             print("Invalid year range. Please enter a valid range.")
#     except ValueError:
#         print("Invalid input. Please enter a number.")

# # Prompt user to select whether they want the total sum or average
# while True:
#     print("Select the type of plot:")
#     print("1. Total Sum")
#     print("2. Average")
#     try:
#         plot_type = int(input("Enter the number corresponding to your choice: "))
#         if plot_type in [1, 2]:
#             break
#         else:
#             print("Invalid selection. Please select a valid number.")
#     except ValueError:
#         print("Invalid input. Please enter a number.")

# # Check if start year and end year are the same
# if start_year == end_year:
#     # Filter data by month within the selected year for both LGC
#     filtered_data_a = allocations_by_year[
#         (allocations_by_year['LGC'] == state_selected_a) &
#         (allocations_by_year['Year'] == start_year)
#     ]
#     filtered_data_b = allocations_by_year[
#         (allocations_by_year['LGC'] == state_selected_b) &
#         (allocations_by_year['Year'] == start_year)
#     ]

#     if plot_type == 1:
#         # Create monthly line plot for total sum
#         fig, ax = plt.subplots(figsize=(22, 8))
#         ax.plot(filtered_data_a['Month'], filtered_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Total Sum")
#         ax.plot(filtered_data_b['Month'], filtered_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Total Sum")
#         ax.set_title(f'Total Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
#     else:
#         # Create monthly line plot for average
#         avg_data_a = filtered_data_a.groupby('Month')['Allocation'].mean().reset_index()
#         avg_data_b = filtered_data_b.groupby('Month')['Allocation'].mean().reset_index()
#         fig, ax = plt.subplots(figsize=(14, 8))
#         ax.plot(avg_data_a['Month'], avg_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Average")
#         ax.plot(avg_data_b['Month'], avg_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Average")
#         ax.set_title(f'Average Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
# else:
#     # Filter data based on user selection for yearly plot
#     filtered_data_a = allocations_by_year[
#         (allocations_by_year['LGC'] == state_selected_a) &
#         (allocations_by_year['Year'] >= start_year) &
#         (allocations_by_year['Year'] <= end_year)
#     ]
#     filtered_data_b = allocations_by_year[
#         (allocations_by_year['LGC'] == state_selected_b) &
#         (allocations_by_year['Year'] >= start_year) &
#         (allocations_by_year['Year'] <= end_year)
#     ]

#     if plot_type == 1:
#         # Create yearly line plot for total sum
#         fig, ax = plt.subplots(figsize=(22, 8))
#         ax.plot(filtered_data_a['Year'], filtered_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Total Sum")
#         ax.plot(filtered_data_b['Year'], filtered_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Total Sum")
#         ax.set_title('Total Allocations by State Over the Years')
#     else:
#         # Create yearly line plot for average
#         avg_data_a = filtered_data_a.groupby('Year')['Allocation'].mean().reset_index()
#         avg_data_b = filtered_data_b.groupby('Year')['Allocation'].mean().reset_index()
#         fig, ax = plt.subplots(figsize=(22, 8))
#         ax.plot(avg_data_a['Year'], avg_data_a['Allocation'], marker='o', label=f"{state_selected_a} - Average")
#         ax.plot(avg_data_b['Year'], avg_data_b['Allocation'], marker='o', label=f"{state_selected_b} - Average")
#         ax.set_title('Average Allocations by LGC Over the Years')

# ax.set_xlabel('Year' if start_year != end_year else 'Month')
# ax.set_ylabel('Total Allocation')
# ax.legend()
# ax.grid(True)
# plt.xticks(rotation=45)

# # Display the plot
# plt.show()

# @title
# # Melt the DataFrame to long format for easier manipulation
# df_melted = lgas.melt(id_vars=['STATE', 'Region', 'LGC'], var_name='Date', value_name='Allocation')

# # Convert Date column to datetime format
# df_melted['Date'] = pd.to_datetime(df_melted['Date'], format='%b-%Y')

# # Extract the year and month from the Date column
# df_melted['Year'] = df_melted['Date'].dt.year
# df_melted['Month'] = df_melted['Date'].dt.strftime('%Y-%m')

# # Now `df_melted` is the DataFrame we'll use
# allocations_by_year = df_melted

# # Get unique LGCs and years from the DataFrame
# unique_lgcs = [lgc.upper() for lgc in allocations_by_year['LGC'].unique()]
# unique_years = allocations_by_year['Year'].unique()

# # Function to select an LGC with input validation
# def select_lgc(prompt):
#     while True:
#         print(prompt)
#         for lgc in unique_lgcs:
#             print(f"- {lgc}")
#         lgc_input = input("Enter the name of the LGC: ").strip().upper()
#         if lgc_input in unique_lgcs:
#             return lgc_input
#         else:
#             print("Invalid LGC name. Please enter a valid LGC name.")

# # Prompt user to select the first LGC
# state_selected_a = select_lgc("Select the first LGC from the following options:")

# # Prompt user to select the second LGC
# state_selected_b = select_lgc("Select the second LGC from the following options:")

# # Prompt user to select the year range
# while True:
#     try:
#         print(f"Select a year range between {min(unique_years)} and {max(unique_years)}")
#         start_year = int(input("Enter the start year: "))
#         end_year = int(input("Enter the end year: "))
#         if start_year in unique_years and end_year in unique_years and start_year <= end_year:
#             break
#         else:
#             print("Invalid year range. Please enter a valid range.")
#     except ValueError:
#         print("Invalid input. Please enter a number.")

# # Prompt user to select whether they want the total sum or average
# while True:
#     print("Select the type of plot:")
#     print("1. Total Sum")
#     print("2. Average")
#     try:
#         plot_type = int(input("Enter the number corresponding to your choice: "))
#         if plot_type in [1, 2]:
#             break
#         else:
#             print("Invalid selection. Please select a valid number.")
#     except ValueError:
#         print("Invalid input. Please enter a number.")

# # Check if start year and end year are the same
# if start_year == end_year:
#     # Filter data by month within the selected year for both LGCs
#     filtered_data_a = allocations_by_year[
#         (allocations_by_year['LGC'] == state_selected_a) &
#         (allocations_by_year['Year'] == start_year)
#     ]
#     filtered_data_b = allocations_by_year[
#         (allocations_by_year['LGC'] == state_selected_b) &
#         (allocations_by_year['Year'] == start_year)
#     ]

#     if plot_type == 1:
#         # Create monthly line plot for total sum
#         fig, ax = plt.subplots(figsize=(22, 8))
#         ax.plot(filtered_data_a['Month'], filtered_data_a['Allocation'], linestyle='-', marker='o', label=f"{state_selected_a} - Total Sum")
#         ax.plot(filtered_data_b['Month'], filtered_data_b['Allocation'], linestyle='-', marker='o', label=f"{state_selected_b} - Total Sum")
#         ax.set_title(f'Total Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
#     else:
#         # Create monthly line plot for average
#         avg_data_a = filtered_data_a.groupby('Month')['Allocation'].mean().reset_index()
#         avg_data_b = filtered_data_b.groupby('Month')['Allocation'].mean().reset_index()
#         fig, ax = plt.subplots(figsize=(22, 8))
#         ax.plot(avg_data_a['Month'], avg_data_a['Allocation'], linestyle='-', marker='o', label=f"{state_selected_a} - Average")
#         ax.plot(avg_data_b['Month'], avg_data_b['Allocation'], linestyle='-', marker='o', label=f"{state_selected_b} - Average")
#         ax.set_title(f'Average Allocations by Month for {state_selected_a} and {state_selected_b} in {start_year}')
# else:
#     # Filter data based on user selection for yearly plot
#     filtered_data_a = allocations_by_year[
#         (allocations_by_year['LGC'] == state_selected_a) &
#         (allocations_by_year['Year'] >= start_year) &
#         (allocations_by_year['Year'] <= end_year)
#     ]
#     filtered_data_b = allocations_by_year[
#         (allocations_by_year['LGC'] == state_selected_b) &
#         (allocations_by_year['Year'] >= start_year) &
#         (allocations_by_year['Year'] <= end_year)
#     ]

#     if plot_type == 1:
#         # Create yearly line plot for total sum
#         fig, ax = plt.subplots(figsize=(22, 8))
#         ax.plot(filtered_data_a['Year'], filtered_data_a['Allocation'], linestyle='-', marker='o', label=f"{state_selected_a} - Total Sum")
#         ax.plot(filtered_data_b['Year'], filtered_data_b['Allocation'], linestyle='-', marker='o', label=f"{state_selected_b} - Total Sum")
#         ax.set_title('Total Allocations by LGC Over the Years')
#     else:
#         # Create yearly line plot for average
#         avg_data_a = filtered_data_a.groupby('Year')['Allocation'].mean().reset_index()
#         avg_data_b = filtered_data_b.groupby('Year')['Allocation'].mean().reset_index()
#         fig, ax = plt.subplots(figsize=(22, 8))
#         ax.plot(avg_data_a['Year'], avg_data_a['Allocation'], linestyle='-', marker='o', label=f"{state_selected_a} - Average")
#         ax.plot(avg_data_b['Year'], avg_data_b['Allocation'], linestyle='-', marker='o', label=f"{state_selected_b} - Average")
#         ax.set_title('Average Allocations by LGC Over the Years')

# ax.set_xlabel('Year' if start_year != end_year else 'Month')
# ax.set_ylabel('Total Allocation')
# ax.legend()
# ax.grid(True)
# plt.xticks(rotation=45)

# # Display the plot
# plt.show()